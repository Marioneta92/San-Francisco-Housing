
A Whale off the Port(folio)

In this assignment, you'll get to use what you've learned this week to evaluate the performance among various algorithmic, hedge, and mutual fund portfolios and compare them against the S&P 500.

import pandas as pd
import numpy as np
import datetime as dt
import seaborn as sns
from pathlib import Path
%matplotlib inline

Data Cleaning

In this section, you will need to read the CSV files into DataFrames and perform any necessary data cleaning steps. After cleaning, combine all DataFrames into a single DataFrame.

Files:

    whale_returns.csv
    algo_returns.csv
    sp500_history.csv

Whale Returns

Read the Whale Portfolio daily returns and clean the data

# Reading whale returns
whale_returns_csv = Path("Resources/whale_returns.csv")
whale_returns_df = pd.read_csv(whale_returns_csv)
whale_returns_df['Date'] = pd.to_datetime(whale_returns_df["Date"], dayfirst = True)
whale_returns_df.set_index(whale_returns_df['Date'], inplace=True)
whale_returns_df.drop(columns=['Date'],inplace=True)
whale_returns_df.head()

	SOROS FUND MANAGEMENT LLC 	PAULSON & CO.INC. 	TIGER GLOBAL MANAGEMENT LLC 	BERKSHIRE HATHAWAY INC
Date 				
2015-03-02 	NaN 	NaN 	NaN 	NaN
2015-03-03 	-0.001266 	-0.004981 	-0.000496 	-0.006569
2015-03-04 	0.002230 	0.003241 	-0.002534 	0.004213
2015-03-05 	0.004016 	0.004076 	0.002355 	0.006726
2015-03-06 	-0.007905 	-0.003574 	-0.008481 	-0.013098

# Count nulls
whale_returns_df.isnull().mean() * 100
whale_returns_df.isnull().sum()

SOROS FUND MANAGEMENT LLC      1
PAULSON & CO.INC.              1
TIGER GLOBAL MANAGEMENT LLC    1
BERKSHIRE HATHAWAY INC         1
dtype: int64

# Drop nulls
whale_returns_df = whale_returns_df.dropna()

Algorithmic Daily Returns

Read the algorithmic daily returns and clean the data

# Reading algorithmic returns
algo_returns_csv = Path("Resources/algo_returns.csv")
algo_returns_df = pd.read_csv(algo_returns_csv)
algo_returns_df['Date'] = pd.to_datetime(algo_returns_df["Date"], dayfirst = True)
algo_returns_df.set_index(algo_returns_df['Date'], inplace=True)
algo_returns_df.drop(columns=['Date'],inplace=True)
algo_returns_df.head()

	Algo 1 	Algo 2
Date 		
2014-05-28 	0.001745 	NaN
2014-05-29 	0.003978 	NaN
2014-05-30 	0.004464 	NaN
2014-06-02 	0.005692 	NaN
2014-06-03 	0.005292 	NaN

# Count nulls
algo_returns_df.isnull().mean() *100
algo_returns_df.isnull().sum()

Algo 1    0
Algo 2    6
dtype: int64

# Drop nulls
algo_returns_df = algo_returns_df.dropna()

S&P 500 Returns

Read the S&P500 Historic Closing Prices and create a new daily returns DataFrame from the data.

# Reading S&P 500 Closing Prices
sp500_history_csv = Path("Resources/sp500_history.csv")
sp500_history_df = pd.read_csv(sp500_history_csv)
sp500_history_df['Date'] = pd.to_datetime(sp500_history_df["Date"], dayfirst = True)
sp500_history_df.set_index(sp500_history_df['Date'], inplace=True)
sp500_history_df.drop(columns=['Date'],inplace=True)
sp500_history_df['Close'] = sp500_history_df['Close'].str.replace('$', '')
sp500_history_df['Close']
sp500_history_df = sp500_history_df.sort_values("Date", ascending=True)
sp500_history_df.head()

	Close
Date 	
2012-10-01 	1444.49
2012-10-02 	1445.75
2012-10-03 	1450.99
2012-10-04 	1461.40
2012-10-05 	1460.93

# Check Data Types
sp500_history_df.dtypes

Close    object
dtype: object

# Fix Data Types
sp500_history_df['Close'] = sp500_history_df['Close'].astype('float')
sp500_history_df['Close'].dtype

dtype('float64')

# Calculate Daily Returns
sp500_history_df.isnull().sum()
sp500_returns_df = sp500_history_df.pct_change()
sp500_returns_df.head()

	Close
Date 	
2012-10-01 	NaN
2012-10-02 	0.000872
2012-10-03 	0.003624
2012-10-04 	0.007174
2012-10-05 	-0.000322

# Drop nulls
sp500_returns_df.pct_change
sp500_returns_df.dropna(inplace=True)
sp500_returns_df.head()

	Close
Date 	
2012-10-02 	0.000872
2012-10-03 	0.003624
2012-10-04 	0.007174
2012-10-05 	-0.000322
2012-10-08 	-0.003457

# Rename Column
sp500_returns_df = sp500_returns_df.rename(columns={"Close":"S&P500"})
sp500_returns_df.head()

	S&P500
Date 	
2012-10-02 	0.000872
2012-10-03 	0.003624
2012-10-04 	0.007174
